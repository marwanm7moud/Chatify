plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id("kotlin-kapt")
    id("com.google.dagger.hilt.android")
}

android {
    namespace 'com.awesome.chatify'
    compileSdk Configurations.COMPILE_SDK

    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))

    defaultConfig {
        applicationId "com.awesome.chatify"
        minSdk Configurations.MIN_SDK
        targetSdk Configurations.TARGET_SDK
        versionCode Configurations.VERSION_CODE
        versionName Configurations.VERSION_NAME

        buildConfigField "String", "APPLICATION_ID",localProperties['application_id']
        buildConfigField "String", "AUTHORIZATION_KEY",localProperties['authorization_key']
        buildConfigField "String", "AUTHORIZATION_SECRET",localProperties['authorization_secret']
        buildConfigField "String", "ACCOUNT_KEY",localProperties['account_key']
        buildConfigField "String", "API_KEY",localProperties['api_key']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Configurations.JAVA_VERSION
        targetCompatibility Configurations.JAVA_VERSION
    }
    kotlinOptions {
        jvmTarget = Configurations.JVM_TARGET
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion Configurations.KOTLIN_COMPILER
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(Modules.UI_MODULE)
    implementation project(Modules.VIEW_MODEL_MODULE)
    implementation project(Modules.REPOSITORY_MODULE)
    implementation project(Modules.NETWORK_MODULE)
    implementation project(Modules.ENTITY_MODULE)
    implementation project(Modules.LOCAL_MODULE)


    implementation (DependencyProject.androidxCore)
    implementation (DependencyProject.lifecycle)
    implementation (DependencyProject.activity)
    implementation platform(DependencyProject.bom)
    implementation (DependencyProject.ui)
    implementation (DependencyProject.ui_graphics)
    implementation (DependencyProject.preview)
    implementation (DependencyProject.material)
    testImplementation (DependencyProject.junit)
    androidTestImplementation (DependencyProject.test)
    androidTestImplementation (DependencyProject.espresso)
    androidTestImplementation platform(DependencyProject.bom)
    androidTestImplementation platform(DependencyProject.ui_test)
    debugImplementation (DependencyProject.ui_tooling)
    debugImplementation (DependencyProject.test_manifest)

    //hilt
    implementation(DependencyProject.hilt)
    kapt(DependencyProject.hilt_compiler)

    DependencyProject.quickBloxSdk.forEach(dep->
            implementation(dep)
    )

    implementation (DependencyProject.data_store)
}